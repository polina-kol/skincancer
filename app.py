import streamlit as st
import torch
from torchvision import transforms
from PIL import Image
import requests
from io import BytesIO
import os
import torch.nn as nn
import torchvision.models as models

# –£—Å—Ç–∞–Ω–æ–≤–∫–∞ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞
DEVICE = 'cuda' if torch.cuda.is_available() else 'cpu'

# –ö–ª–∞—Å—Å—ã
CLASS_NAMES = ['benign', 'malignant']

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –º–æ–¥–µ–ª–∏
@st.cache_resource
def load_model():
    model = models.efficientnet_b0()
    model.classifier[1] = nn.Linear(model.classifier[1].in_features, 2)
    model.load_state_dict(torch.load('model.pth', map_location=DEVICE))
    model.to(DEVICE)
    model.eval()
    return model

model = load_model()

# –¢—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∞—Ü–∏–∏
transform = transforms.Compose([
    transforms.Resize((224, 224)),
    transforms.ToTensor(),
    transforms.Normalize([0.485, 0.456, 0.406], [0.229, 0.224, 0.225])
])

# –ü—Ä–µ–¥–∏–∫—Ç–æ—Ä
def predict_image(image):
    image_tensor = transform(image).unsqueeze(0).to(DEVICE)
    with torch.no_grad():
        output = model(image_tensor)
        probs = torch.softmax(output, dim=1)
        pred_idx = torch.argmax(probs, dim=1).item()
        confidence = probs[0][pred_idx].item()
    return CLASS_NAMES[pred_idx], confidence

# –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å
st.set_page_config(page_title="Skin Cancer Classifier", layout="centered")
st.title("ü©∫ Skin Cancer Classifier")
st.markdown("### –û–ø—Ä–µ–¥–µ–ª—è–µ—Ç –¥–æ–±—Ä–æ–∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –∏ –∑–ª–æ–∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –æ–ø—É—Ö–æ–ª–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è.")

# –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –º–æ–¥–µ–ª–∏
with st.expander("‚ÑπÔ∏è –û –º–æ–¥–µ–ª–∏"):
    st.markdown("""
    - **–ú–æ–¥–µ–ª—å**: EfficientNet-B0
    - **–ö–ª–∞—Å—Å—ã**: –¥–æ–±—Ä–æ–∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã–π / –∑–ª–æ–∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã–π
    - **–ú–µ—Ç—Ä–∏–∫–∏**:
        - Accuracy: ~0.90
        - Precision: ~0.85
        - Recall: ~0.94
        - F1 Score: ~0.89
        - ROC AUC: ~0.98
    - **–ß—Ç–æ –∑–Ω–∞—á–∞—Ç —ç—Ç–∏ –º–µ—Ç—Ä–∏–∫–∏?**
        - **Accuracy** ‚Äî –æ–±—â–∞—è —Ç–æ—á–Ω–æ—Å—Ç—å —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è.
        - **Precision** ‚Äî –¥–æ–ª—è –ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã—Ö –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–π.
        - **Recall** ‚Äî —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç—å –Ω–∞—Ö–æ–¥–∏—Ç—å –≤—Å–µ —Ä–µ–∞–ª—å–Ω—ã–µ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–µ —Å–ª—É—á–∞–∏.
        - **F1** ‚Äî –≥–∞—Ä–º–æ–Ω–∏—á–µ—Å–∫–æ–µ —Å—Ä–µ–¥–Ω–µ–µ –º–µ–∂–¥—É precision –∏ recall.
        - **ROC AUC** ‚Äî –∫–∞—á–µ—Å—Ç–≤–æ –±–∏–Ω–∞—Ä–Ω–æ–π –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏.
    """)

# –í—ã–±–æ—Ä –∏—Å—Ç–æ—á–Ω–∏–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
option = st.selectbox("–í—ã–±–µ—Ä–∏—Ç–µ –∏—Å—Ç–æ—á–Ω–∏–∫ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è:", ("–ó–∞–≥—Ä—É–∑–∏—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ", "URL –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è", "–°–¥–µ–ª–∞—Ç—å —Ñ–æ—Ç–æ"))

image = None

if option == "–ó–∞–≥—Ä—É–∑–∏—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ":
    uploaded_file = st.file_uploader("–í—ã–±–µ—Ä–∏—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ...", type=["jpg", "jpeg", "png"])
    if uploaded_file is not None:
        image = Image.open(uploaded_file).convert("RGB")

elif option == "URL –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è":
    url = st.text_input("–í–≤–µ–¥–∏—Ç–µ URL –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è:")
    if url:
        try:
            response = requests.get(url)
            image = Image.open(BytesIO(response.content)).convert("RGB")
        except:
            st.error("–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø–æ —É–∫–∞–∑–∞–Ω–Ω–æ–º—É URL.")

elif option == "–°–¥–µ–ª–∞—Ç—å —Ñ–æ—Ç–æ":
    camera_image = st.camera_input("–°–¥–µ–ª–∞–π—Ç–µ —Ñ–æ—Ç–æ")
    if camera_image is not None:
        image = Image.open(camera_image).convert("RGB")

# –ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ
if image:
    st.image(image, caption="–í–∞—à–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ", use_column_width=True)
    label, confidence = predict_image(image)
    st.success(f"–ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ: **{label}**")
    st.info(f"–£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: **{confidence:.2%}**")